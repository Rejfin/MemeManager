name: Create and publish a Docker images

on:
  push:
    tags:
      - 'v*'
      - 'dev-*'

env:
  API_IMAGE_NAME: meme-manager-api
  UI_IMAGE_NAME: meme-manager-ui
        
jobs:
  Build-API:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker meta
        id: meta-api
        uses: docker/metadata-action@v4
        with:
          flavor: |
            latest=false
          images: |
            rejfin/${{ env.API_IMAGE_NAME }}
            ghcr.io/rejfin/${{ env.API_IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable=${{ github.event.repository.default_branch == 'main'}}

      - name: Build API docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Api.Dockerfile.production
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/api_image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: api_image
          path: /tmp/api_image.tar

  Build-UI:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker meta
        id: meta-ui
        uses: docker/metadata-action@v4
        with:
          flavor: |
            latest=false
          images: |
            rejfin/${{ env.UI_IMAGE_NAME }}
            ghcr.io/rejfin/${{ env.UI_IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable=${{ github.event.repository.default_branch == 'main'}}

      - name: Build UI docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Frontend.Dockerfile.production
          tags: ${{ steps.meta-ui.outputs.tags }}
          outputs: type=docker,dest=/tmp/ui_image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ui_image
          path: /tmp/ui_image.tar
      
      - name: check
        run: |
          docker load --input /tmp/ui_image.tar
          docker image ls -a

  Push-Docker-Images:
    runs-on: ubuntu-latest
    needs: [Build-API, Build-UI]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download artifact API image
        uses: actions/download-artifact@v3
        with:
          name: api_image
          path: /tmp
      
      - name: Download artifact UI image
        uses: actions/download-artifact@v3
        with:
          name: ui_image
          path: /tmp

      - name: Load images
        run: |
          docker load --input /tmp/api_image.tar
          docker load --input /tmp/ui_image.tar

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to Github Container Repository
        run: |
          docker image ls -a
          docker push -a ghcr.io/rejfin/${{ env.API_IMAGE_NAME }}
          docker push -a ghcr.io/rejfin/${{ env.UI_IMAGE_NAME }}
      
      - name: Publish to Docker Hub
        run: |
          docker push -a rejfin/${{ env.API_IMAGE_NAME }}
          docker push -a rejfin/${{ env.UI_IMAGE_NAME }}
